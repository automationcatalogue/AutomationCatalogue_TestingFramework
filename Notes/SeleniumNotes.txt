Projects/Real-time Web Applications
1. http://demowebshop.tricentis.com/login
	Email: aarosagarch@gmail.com
	Password: Admin@123

2. https://automatetest-trials710.orangehrmlive.com
	username: Admin
	Password: Admin@123
	
==> Selenium Documentation Link ==> To know the methods, classes, Interfaces, packages, variables etc.,
https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/WebElement.html#clear()


Applications are divided into '3' types

1. Web applications
2. desktop applications/window applications
3. Mobile applications


Selenium:
----------
==> Selenium is a purely web based automation testing tool. It means we can automate any website action
==> Official Website: https://www.selenium.dev/

==> Selenium is available in '3' different flavours
1. Selenium IDE --> To automate the webapplications without code
2. Selenium WebDriver --> To automate the webapplications with the code
3. Selenium Grid --> To execute the testcases in multiple browsers and multiple os in parallel


Selenium is supporting '3' different OS
1. Mircosoft Windows
2. mac OS
3. Linux

Selenium is supporting '6' browsers
1. Chrome
2. Firefox
3. Edge
4. Internet explorer
5. Opera
6. Safari

Selenium is supporting '5' Programming languages
1. C#
2. Ruby
3. Java
4. Python
5. JavaScript


==> Selenium Library with Java programming is going to use in our course

==> Selenium is a set of Jars(20 to 30MB)

==> Selenium'4' is the latest version using --> 4.9.0

How to Download the Selenium Library:
-------------------------------------
1. Open https://www.selenium.dev/
2. Click on Downloads
3. Download Selenium Library with Java Programming
4. Move this downloaded folder to AutomationCatalogue --> Jars --> Selenium WebDriver
5. Extract the folder --> All the selenium Libraries can be seen

==> How to add the Selenium Library to the Java Project in IntelliJ Idea:
-------------------------------------------------------------------------
1. Create a Java Project in IntelliJ/Use the existing Java Project
2. Click on File --> Project Structure --> Modules
3. Click on + icon and select jars (or) Libraries
4. Browse the Selenium Libraries wherever present in your system
5. Click on Apply --> OK

==> If you are use older versions of selenium like (Selenium3 (or) few initial versions of Selenium4 --> Required browser related drivers)
==> Always maintain the latest version of the browser and latest of the selenium webdriver --> to avoid the environment issues/compatibility issues

WebDriver ob = new ChromeDriver(); --> Launch the Chrome browser
				
				
									WebDriver (Interface) --> 10 to 12 different
											|
					---------------------------------------------------------------------------------
					|				|				|			|				|				|
				ChromeDriver		FirefoxDriver	EdgeDriver	SafariDriver	OperaDriver		.......
				
				
				
				ChromeDriver ob = new ChromeDriver();
				
				WebDriver driver = new FirefoxDriver();
				
				driver = new OperaDriver();
==> WebDriver --> It is an interface
==> WebDriver is implemented in the following classes
	1. ChromeDriver
	2. EdgeDriver
	3. FirefoxDriver
	4. InternetExplorerDriver
	5. OperaDriver
	6. SafariDriver
	7. RemoteWebDriver
	8. EventFiringWebDriver
	
WebDriver methods:
---------------------------
1. void get(String url) --> This method is used to load the URL
2. close() --> This method is used to close the browser
3. navigate().to(String url)--> This method is used to load the URL
4. quit() --> This method is used to close browser
5. String getTitle()--> This method is used to get the Title of the application and return type is String
6. manage().window().maximize() --> This method is used to maximize the browser window
7. navigate().forward() --> This method is used to move forward in the current browser window
8. navigate().back() --> This method is used to move backward in the current browser window
9. findElement(By by) --> This method is used to find the Element of a page/application
10. findElements(By by) --> This method is used to return the list of elements in a page/application
11. String getCurrentURL() --> This method is used to get the Current URL of the application
12. String getPageSource() --> This method is used to get the page source of the application
13. String getWindowHandle() --> This method is used to get the the current window Session ID
14. Set<String> getWindowHandles() --> This method is used to return the Set of Session IDs (or) the number of windows which are opened by WebDriver
15. switchTO(String window) --> This method is used to used to switch between the browser windows (or) in handling frames (or) in handling alerts


Difference between get() and navigate().to():
----------------------------------------------
==> Both get(String url) and navigate.to(String url) methods are used to load the given URL.

	When get() method is used, driver will wait till the complete page/application is loaded and then it moves to next step in the script
	
	When navigate().to() method is used, driver will not wait till the complete page/application is loaded. It just loads the url and moves to the next step in the script
	
Difference between close() and quit():
--------------------------------------
==>	Both close() and quit() methods are used to close the browsers

	When close() method is used, driver will close the current window which is opened by WebDriver
	
	When quit() method is used, driver will close all the windows which are opened by WebDriver
	
==> There are '8' types of locators present in selenium
1. Name
2. ID
3. ClassName
4. LinkText
5. PartialLinkText
6. TagName
7. Xpath
8. CssSelector

TagName --> Identified line starting tagname
attributeName -->
attributeValue --> 

	
Selenium WebDriver Locators:
----------------------------

ClassName :
-----------
By
1. By id(String args);
2. By name(String args);
3. By linkText(String args);
4. By partialLinkText(String args);
5. By className(String args);
6. By tagName(String args);
7. By xpath(String args);
8. By cssSelector(String args);

==>DOM --> Document Object Model --> Where all the WebElements/Objects are stored in a page

==> 1. Click on F12 button --> DOM will be opened
==> 2. Right click on a specific Element --> Click on Inspect option

											WebElement
==> WebElement in Selenium is refers the HTML element in a DOM.
==> WebElement is a interface in Selenium

WebElement methods:
-------------------
1. public void clear(); --> This method is used to clear the text, if there is a text available in the element
2. public void click(); --> This method is used to click on the element
3. public void submit(); --> This method is used to submit a form to the remote server, if the current element is a form (OR) current element is available with in a form
4. public void sendKeys(CharSequence args0); --> This method is used to enter a text in an element (Ex: Text-box)
5. public boolean isDisplayed(); --> This method is used to check whether element is displayed or not?
6. public boolean isEnabled(); --> This method is used to check whether element is enabled or not
7. public boolean isSelected(); --> This method is used to Determine whether element is selected or not
8. public String getText(); --> This method is used to get the Text of a element
9. public String getAttribute(String args0); --> This method is used to get the value of a given Attribute of the element
10. public String getCssValue(String args0); --> This method is used to get the value of given CSS property
11. public String getTagName(); --> This method is used to return the tagName of a given element
12. public Point getLocation(); --> This method is used to get the Element Location where on the page


==> If elements are getting disappeared while inspecting (If you are unable inspect the elemnt)
==> Press Ctrl+shift+P --> window will appear
==> Select Show rendering from the drop-down 
==> Then you can able to inspect the element

(OR)
==> If the above approach is not works
==> On the Right-hand side of the DOM --> Click on EventListeners
==> Select Blur option and right Click and delete all the event Listeners which are appreared on the element


SELECT:
--------
==> Select is a Pre-defined class in Selenium Library
==> Select class of Selenium Library is used to select the data from drop-down values and List-boxes
==> Select class can be used only when there is a Select tag available in HTML DOM

==> To use the Select class methods, we need to create a Object for Selenium Class by passing the driver Object
		Select ob = new Select(WebElement);
		
Methods:
--------
	Select s=new Select(WebElement element);
1. void selectByIndex(int index); This method is used based on the index value of the drop down
2. void selectByValue(String value); This method is used to select the dropdown based on the value which is provided in the drop-down
3. void selectByVisibleText(String Text); This method is used to select the dropdown based on the visible text.
4. void deSelectByIndex(int index); This method is used to deselect the value from a List-box based on index position
5. void deSelectByValue(String value); This method is used to deselect the value from a List-box based on value of list-box
6. void deSelectByVisibleText(String text); This method is used to deselect the value from a List-box based on visible text of list-box
7. List<WebElement> getOptions(); This method is used to get the List of Options/WebElements from a drop-down
8. WebElement getFirstSelectedOption(); This method is used to get the WebElement of selected value in a drop-down

Handling Frames:
---------------
We can switch into the frame in '3' ways,
1. By Using Index
	driver.switchTo().Frame(int index);
2. By Using Frame Id or Name
	driver.switchTo().Frame(String id/name);
3. By Using WebElement
	driver.switchTo().Frame(WebElement element);

If you want to come out/Exit from the frame, we should use below
driver.switchTo().DefaultContent();

Sample Examples are:
--------------------
1. https://www.w3schools.com/js/tryit.asp?filename=tryjs_intro_inner_html
2. https://netbanking.hdfcbank.com/netbanking/

Alerts:
-------
==> Alert is one of the Pre-defined class in Selenium Library.
==> Sometimes in the application, Javascript alerts (or) JQuery alerts will be appeared, to handle these alerts Alert class in the selenium library can be used
	
	Alert ob1 = driver.switchTo().alert();
	
==> If we want to accept the Alert
	ob1.accept();
	
==> If we want to cancel the Alert
	ob1.dismiss();
	
==> If we want to get the Alert Text
	ob1.getText();
	
==> To enter the data into the Alert text box;
	ob1.sendKeys();
	
	Note: In Selenim, Alerts can be handled only in the case of Alert has atmost buttons and one text-box
	
Browser Support in Selenium:
----------------------------
1. Chrome
	WebDriver driver = new ChromeDriver();
2. IE --> Only applicable for Windows OS
3. Safari --> Only applicable for Mac OS
4. Firefox 
	WebDriver driver = new FirefoxDriver();
5. Mircosoft Edge --> Only applicable for Windows OS
	WebDriver driver = new EdgeDriver();

Window Handling:
================
public String getWindowHandle() --> This method is used to get the the current window Session ID
public Set<String> getWindowHandles() --> This method is used to return the Set of Session IDs (or) the number of windows which are opened by WebDriver
public switchTO(String window) --> This method is used to used to switch between the browser windows (or) in handling frames (or) in handling alerts

	//Implicit type
		int x=10;
        System.out.println(x);

        float y=x;//implicit type conversion --> No data loss
        System.out.println(y);
		
	
	//explicit type conversion
        float b=20.256f;
        System.out.println(b);

        int a=(int)b; //explicit type conversion --> possibility to loose the data
        System.out.println(a);


Capturing Screenshots in Selenium:
----------------------------------
==> Capturing Screenshots in Selenium is possible through TakeScreenshot Interface
==> 1. Take the WebDriver object and convert into TakeScreenshot interface object (by using explicit type conversion)
	2. By using getScreenshotAs() method, capture a screenshot
	3. above method getScreenshotAs() return type is File, so that's reason store in a file variable
	4. Create a File Class Object and provide the destination path
	5. To Copy the File from source to destination, we need to download the commons-io jar from google and keept it in the project
	6. By using FileUtils class, copyFile method and provide the src and dest file objects
	7. So that Image will be captured in the destination location

	WebDriver driver = new ChromeDriver();
	TakeScreenshot ts = (TakeScreenshot)driver;
	File src = ts.getScreenshotAs(OutputType.File);
	File dest = new File("<Path of the Location with Name>");
	FileUtils.copyFile(src, dest);
	
	Example:
	--------
	File dest = new File("C:\AutomationCatalogue\Projects\TestAutomationCatalogue_Batch42\src\Screenshots\OrangeHRM_LoginPage.jpg");
	
Robot Class:
------------
==> Robot class is not part of Selenium Library, which is a pre-defined class in Java Library
==> Robot class is used to handle mouse and keyboard related actions
==> Robot class is not preferred to use in real time application when doing the autmation, reason is It will not work when script executing CICD Pipelines
==> Robot class is the last priority in using Selenium scripts because Robot class doesn't work in Remote machines (like Jenkins, Selenium Grid etc.,)

==> Robot r = new Robot();
Methods:
--------
1. keyPress --> This method is used to press the given key
2. keyRelease --> This method is used to release the given key
3. mousePress --> This method is used to press the mouse
4. mouseRelease --> This method is used to release the mouse
5. mouseWheel --> This method is used to scroll the mouse

Actions Classes in Selenium:
=============================
==> Actions class is one of the very important class in Hanlding Mouse and Keyboard related activities

Handling Keyboard and Mouse related activities by using Actions class:
----------------------------------------------------------------------
Actions action=new Actions(driver);
1. click(); --> This method is used to click in the current mouse location
2. click(WebElement); --> This method is used to click in the middle of the given element
2. clickAndHold(); --> This method is used to click (without releasing) at the current mouse location.
3. clickAndHold(WebElement); --> This method is used to click (without releasing) in the middle of the given element.
4. contextClick(); --> This method is used to right-click at the current mouse location
5. contextClick(WebElement); --> This method is used to right-click in the middle of the given element.
6. doubleClick(); --> This method is used to double-click at the current mouse location
7. doubleClick(WebElement); This method is used to double-click in the middle of the given element.
8. dragAndDrop(WebElement source, WebElement target); -->This method is used to performs click and hold at the location of the source element, moves the location of the target element, then releases the mouse
9. dragAndDropBy(WebElement source, int xOffset, int yOffset); This method is used to performs click and hold at the location of the source element, moves by a given offset, then releases the mouse
10. keyDown(Keys theKey); --> It performs a modifier key press
11. keyDown(WebElement element, Keys theKey); --> It performs a modifier the key press after focusing on an element
12. keyUp(Keys theKey); --> It performs a modifier key release
13. keyUp(WebElement element, Keys theKey); --> It performs a modifier the key release after focusing on an element
14. moveByOffset(int xOffset, int yOffset); --> This method is used to move the mouse from its current position by the given offset.
15. moveToElement(WebElement); --> This method is used to  mouse-hover on the middle of the given element
16. movetToElement(WebElement element, int xOffset, int yOffet); --> This method is used the mouse-hover to an offset from the top-left corner of the element.

17. perform() ; --> This method is used to performing the actions without calling build() first.
18. build() ; --> This method is used before performing the group of actions on a webElement.
19. release(); --> This method is used to releases the depressed left mouse button at the current mouse location
20. release(WebElement); --> This method is used to releases the depressed left mouse button, in the middle of the given element
21. sendKeys(charSequence); --> This method is used to perform the send keys to the active element
22. sendKeys(WebElement element, charSequence) --> This method is used to perform the sendKeys to the specific webElement.

Example Website:
----------------
1. Click and Hold methods in the below URL
https://jqueryui.com/slider/#colorpicker

2. Drag and Drop methods in the below URL
https://jqueryui.com/droppable/
======================================================================================================================
JavaScript Executor:
--------------------
==>JavaScript is used to make the Website Interactive
==>JavaScript can change the content of the html page dynamically

Java script Executor:
----------------------
--> While performing test scenarios, there are certain actions those become inherent part of test scripts. If there are any issues while performing the actions we can use Java script executor.
Actions may be:
1. Clicking a button, hyperlink, link etc.,
2. Typing a text in text-box
3. scrolling vertically, horizontally or until the desired object in to view and many more ...

Why should we use JavaScriptExecutor:
-------------------------------------
1. Because of cross domain policies of browsers enforces our script execution may fail unexpectedly without adequate error messaging.
2. JavaScriptExecutor presents the capabilities to execute the Javascript directly within the browser.
3. JavaScriptExecutor enhances the existing scripts by performing javascript injection into our application. In Simple words "JavaScript can be executed within the browser with the help of JavaScript Executor"
4. JavaScriptExecutor allows to run pure JavaScript code irrespective of the Selenium language binding(Java, C#, Python etc.,)


JavaScriptExecutor:
-------------------
==> JavascriptExecutor is a predefined interface in selenium.

1. executeScript(String script, args);--> Executes JavaScript in the context of the currently selected frame or window.
2. executeAsyncScript(String script, args); --> Execute an asynchronous piece of JavaScript in the context of the currently selected frame or window.

Syntax:
-------
JavaScriptExecutor js=(JavaScriptExecutor)driver;
js.executeScript(String scripts, args);

JavaScriptExecutor scripts and it's implementation:
-----------------------------------------------------
==> JavaScriptExecutor js=(JavaScriptExecutor)driver;

1. Clicking a WebElement
	WebElement element=driver.findElement();
	js.executeScript("arguments[0].click();", element);
	
2. Typing in text-box
	//document.getElementById('ID of a WebElement'); --> Finds an element using Id
	//document.getElementsByTagName(name); --> Finds elements using tagName
	//document.getElementsByClassName(name) --> Finds elements using className
	
	js.executeScript("document.getElementById('ID of a WebElement').value='<testdata>'");
	(OR)
	WebElement element = driver.findElement(By.xpath("*******"));
	js.executeScript("arguments[0].value='<testdata>';", element);
	
3. scrolling	
	js.executeScript("window.scrollBy(0,50)");//vertically down by 50 pixels
	js.executeScript("window.scrollBy(0,-50)");//vertically up by 50 pixels
	js.executeScript("window.scrollBy(50,0)");//Horizontally towards right by 50 pixels
	js.executeScript("window.scrollBy(-50,0)");//Horizontally towards left by 50 pixels
	
	js.executeScript("window.scrollTo(0, document.body.scrollHeight)");// To Scroll bottom of the page
	js.executeScript("window.scrollTo(0, -document.body.scrollHeight)");// To Scroll top of the page
	js.executeScript("window.scrollTo(document.body.scrollWidth, 0)");// To Scroll right side of the page
	js.executeScript("window.scrollTo(-document.body.scrollWidth, 0)");// To Scroll left side of the page
	
	js.executeScript("arguments[0].scrollIntoView(true);", element); //scrolling down (or) up until the element in view.
	
4. Refresh the browser
	js.executeScript("history.go(0)");
	
5. Navigate to a different page
	js.executeScript("window.location = \'<URL>'");
	
6. To get the Title of the page
	js.executeScript("return document.title;").toString();

7. To get the URL of the page
	js.executeScript("return document.URL;").toString();
	
8. To get the Domain of the page
	js.executeScript("return document.domain;").toString();
	
9. To get the InnerText of the entire webpage in selenium
	//document.documentElement.innerText
	js.executeScript("return document.documentElement.innerText").toString();
	
To know all JavascriptExecutor methods and scripts, refer the below link:
-------------------------------------------------------------------------
https://www.w3schools.com/js/js_htmldom.asp


Selenium Timeouts/Synchronization:
----------------------------------
==> Whenever WebDriver finds an element,  It requires to follows the element on the page.
By default:
	1. WebDriver finds the element only once
	2. It doesn't wait for the element, So timeout is "0" seconds.
	
==> So whenever WebDriver element not found, it raises an exception like NoSuchElementException

1. Implicit TimeOut:
--------------------
	Syntax:
	-------
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
		
==> Whenever driver find an element. it requires to find the element within  timeout '0' seconds. If doesn't found it quits and it doesn't retry for it.

==> If driver sets implicitly for 20 seconds, now webDriver waits for 20 seconds instead of 0 seconds. Once the page is loaded, it finds an element
if doesn't found WebDriver waits for 250 milliseconds (Delay time) and it then again goes to find and element and it keeps on repeating the loop, till the timeout is happened.

==> If within 20 seconds, if webDriver doesn't find the element, WebDriver raises the exception called the "NoSuchElementException/ElementNotFoundException". This implicit  wait is attached to the driver till the lifetime of the driver.

==> So until the driver is active, this implicit wait will be used to find the all elements in the code/program.

disadvantages/drawbacks:
------------------------
==> 1. Let's assume that in application all elements are loading very quickly, but one webelement taking 60 seconds of time
If Driver object sets the timeout with huge time like '60' seconds, This timeout will be applied for all the webelements on a webpage
In this scenarios, It is not good to use Implicit timeout, because it applies 60 seconds of timeout for all webelements

==> 2. Implicit wait only checks whether element is loaded in the DOM or not. Sometime elements are loaded in the DOM, but not reflected in the UI (or) not enabled. In this case also, It is not good to use Implicit timeout, because implicit wait only checks the element whether element present in the DOM or not and it will not check in UI
	
2. Explicit Timeouts:
---------------------
==> An explicit waits is code you to define to wait for a certain condition to occur before proceeding further in the code.
==> The worst case of this Explicit wait is Thread.sleep(), which sets the condition to an exact time period to wait
(OR)
==> Explicit waits are used to halt the execution till the time specific condition is met (OR) maximum time has elapsed.
==> Unlike Implicit waits, explicit waits are applied for particular instance only

1. WebDriverWait timeout
2. FluentWait timeout

WebDriverWait timeout:
----------------------
			
			Syntax:
			-------
					WebDriverWait wait = new WebDriverWait(driver,Duration.ofSeconds(20));
					
			Examples:
			---------
					WebDriverWait wait = new WebDriverWait(driver,Duration.ofSeconds(10));
					wait.until(ExpectedConditions.presenceOfElementLocated(By.id("******")));
	
	The above statement waits up to time outs (lets say 10 seconds), before throwing a TimeoutException. 
		(OR)
		If it finds the element will return it in 0-10 seconds
		
	==>WebDriverWait by default calls the expected condition for every 500 mill seconds, until it returns successfully. 
	
When do we use the WebDriverWait?
---------------------------------
==> There can be instance when a particular element takes more than a minute to load. In this case, we definitely not like to set a huge to implicit wait, as of we do this our browser will going to wait for the same time for every element

	To avoid this situation, we should simply put a separate time on the required element only. by following this our browser implicit wait time would be short for every element and it would be large for specific element.
	
Best scenarios to implement WebDriverWait:
------------------------------------------
1. An element not present in UI, being at all in the DOM
2. An element being present, but not visible
3. An element being present in the DOM, but not enable (i.e., not clickable)

There are pages which gets displayed with the Javascript, the elements are already present in the browser DOM, but are not visible. The implicit wait only waits for an element to appear in the DOM. so it returns immediately but when you interact with element, we could get a "NoSuchElementException". we could test this hypothesis by writing a helper method that explicit waits for an element to visible (OR) clickable.

Types of ExpectedConditions:
----------------------------
==> ExpectedConditions class provides a great help to deal with scenarios where we have to ascertain for condition to occur before executing the actual test step.
==> ExpectedConditions class comes with a wide range of expected conditions that can be accessed with the help of the WebDriverWait reference variable and until() method

Methods:
--------
1. alertIsPresent() --> An expectation to be alert is present
2. frameToBeAvailableAndSwitchToIt(By locator) --> An expectation for checking whether the given frame is available to switch to the frame
3. frameToBeAvailableAndSwitchToIt(WebElement frameLocator) --> An expectation for checking whether the given frame is available to switch to the frame
4. presenceOfElementLocated(By locator) --> An expectation for checking that an element is present on the DOM of a page.
5. presenceOfAllElementsLocatedBy(By locator) --> An expectation for checking that there is at least one element present on a web page.
6. visibilityOf(WebElement element) --> An expectation for checking that an element, known to be present on the DOM of a page, is visible.
7. visibilityOfElementLocated(By locator) --> An expectation for checking that an element is present on the DOM of a page and visible.
8. visibilityOfAllElements(List<WebElement> elements) --> An expectation for checking that all elements present on the web page that match the locator are visible
9. elementToBeClickable(By locator) --> An expectation for checking element is visible and enabled, such that you can click it
10. elementToBeClickable(WebElement element) --> An expectation for checking element is visible and enabled, such that you can click it
11. invisibilityOf(WebElement element) --> An expectation for checking the element to be invisible
12. invisibilityOfElementLocated(By locator) --> An expectation for checking that an element is either invisible or not present on the DOM.
13. stalenessOf(WebElement element) --> Wait until an element is no longer attached to the DOM.
14 textToBePresentInElement(WebElement element, String text) --> An expectation for checking if the given text is present in the specified element
15. titleContains(String title) --> An expectation for checking that the title contains a case-sensitive substring
16. urlContains(String fraction) --> An expectation for the URL of the current page to contain specific text.

==> 1. elementToBeClickable ==> This condition will wait till the specific webelement is presents in the DOM and it is visible in the UI and It should be clickable
	2. visibilityOfElement ==> This condition will wait till the specific webelement is presents in the DOM and it is visible in the UI
	3. presenceOfElementLocated ==> This condition will wait till the specific webelement is presents in the DOM
	
	

FluentWait:
-----------
==> Explicit Wait can be achieved in '2' ways
	1. WebDriverWait
	2. FluentWait
==> FluentWait finds the Web element repeatedly at regular intervals of time until the timeout (OR) till the object gets found.
==> Unlike WebDriverWait, FluentWait will builds with the customized wait methods based on condition

==> Whatever synchronization is possible through WebDriverWait, same will be done through FluentWait also.
==> In WebDriverWait, there are predefined expected conditions to implement the synchronization in selenium, but whereas for FluentWait there are no specific predefined expected conditions, which needs to develop customized conditions to implement FluentWait.

==> In WebDriverWait, Delay time is 500 ms and whereas FluentWait Delay time (calls as Polling time) is customized.

Syntax and Example:
-------------------
	Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeOut(30, Seconds).pollingEvery(5, Seconds).ignoring(NoSuchElementException.class);
		
	wait.until(new Function<webDriver, WebElement>(){
		public WebElement apply(WebDriver driver){
			return driver.findElement(By.id("foo"));
		}
	});


WebTables:
----------
==> If the application data contains in the form of rows and columns, that it self called as WebTable
==> Below is the typica structure you see in the DOM

<table id='abcd', name='xyz'>
	<thead>
		<tr>
			<th header1='value1'>
			<th header2='value2'>
			<th header3='value3'>
			<th header4='value4'>
			<th header5='value5'>
		</tr>
	</thead>
	<tbody>
		<tr id='1'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>
		<tr id='2'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>
		<tr id='3'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>
		<tr id='4'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>
		<tr id='5'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>
		<tr id='6'>
			<td attr1='value1'>
			<td attr2='value2'>
			<td attr3='value3'>
			<td attr4='value4'>
			<td attr5='value5'>
		</tr>

	</tbody>

</table>

==> tbody --> It represents complete table body
==> tr --> It represents the table row
==> td --> It represents the table column

1. 
==> To Retrieve the Specific row information
	Syntax:
	------
		//table[@id='******']/tbody/tr[rowNumber]
		
	Examples
		//table[@id='employeeListTable']/tbody/tr[5]
		
2.
==> To Retrieve the all rows information
	Syntax:
	------
		//table[@id='******']/tbody/tr
	
	Example:
	--------
		//table[@id='employeeListTable']/tbody/tr
		
3. To Retrieve the data from Specific row and Specific cell data
	Syntax:
	-------	
		//table[@id='******']/tbody/tr[rowNumber]/td[columnNumber]
	Example:
	--------
		//table[@id='employeeListTable']/tbody/tr[3]/td[6]
		
4. To Retrieve all columns information for a specific row
	Syntax:
	-------
		//table[@id='********']/tbody/tr[rowNumber]/td
	Example:
	--------
		//table[@id='employeeListTable']/tbody/tr[1]/td
		
		
Desired Capabilities/Options Classes:
--------------------------------------
==> Until Selenium3 --> In Selenium, Desired Capabilities class is present
==> In Selenium4 onwards --> DesiredCapabilities class is deprecated, inplace of DesiredCapabilities Options classes are Introduced

1. Chrome Browser --> ChromeOptions
2. Firefox Browser --> FirefoxOptions
3. Edge Browser --> EdgeOptions
4. Safari Browser --> SafariOptions

These Option classes are Used to manipulate your browser with some default properties
	(or)
If we want set some properties for our browser before It launches, we should use browser related options classes

ChromeOptions Class:
--------------------
		ChromeOptions options = new ChromeOptions();
		options.addArguments("start-maximized"); //To Maximize the screen
		options.addArguments("--incognito"); // To open the browser in Incognito mode
		options.addArguments("--disable-popup-blocking");//To Disable the pop-up blocker
		options.addArguments("--ignore-certificate-errors");//To Ignore the certificate related errors
		options.setAcceptInsecureCerts();// To accept the websites which are not having security certificate
		
		options.setBinary("/path/to/other/chrome/binary"); //To use chrome executable binary from non-standard location
		options.addExtensions(new file("<plugin extension of crx file path>"));//To add the extensions for a chrome browser
		
To Merge the DesiredCapabilities with ChromeOptions class, use the merge() method, so that both DesiredCapabilities and chrome options can be passed to the WebDriver object
-->		DesiredCapabilities caps = new DesiredCapabilities();
		caps.setCapability("something", true);
		
-->		ChromeOptions options = new ChromeOptions();
		options.addArguments("something");
		
--> 	options.merge(caps); //This method is used to merge all the DesiredCapabilities into ChromeOptions class

	WebDriver driver = new ChromeDriver(options);
		
		
==> Below link will show you all the ChromeOptions arguments
	https://peter.sh/experiments/chromium-command-line-switches/
	